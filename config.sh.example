#!/bin/bash

# User Configuration
export INSTALL_USER="your_username"

# Default mount options
# Format: comma-separated list of mount options
# Common options:
#   - auto: mount during boot
#   - noauto: don't mount during boot
#   - user: allow regular users to mount
#   - nosuid: ignore suid and sgid bits
#   - nodev: ignore device special files
#   - nofail: don't report errors if device is not present
#   - x-gvfs-show: show in file manager
export MOUNT_OPTIONS="auto,nosuid,nodev,nofail,x-gvfs-show"

# Drive Mount Configuration
# Format: ["mount_path"]="uuid"
# To find UUID of your drives, use: lsblk -f
declare -A MOUNT_DISKS=(
    ["$HOME/path/to/mount1"]="uuid-of-first-drive"     # description of first drive
    ["$HOME/path/to/mount2"]="uuid-of-second-drive"    # description of second drive
)

# Symlink Configuration
# Format: ["original_path"]="target_path"
# Note: Paths can use $HOME or other environment variables
# The original_path will be removed if it exists and replaced with a symlink to target_path
declare -A SYMLINK_PATHS=(
    ["$HOME/original/path1"]="$HOME/target/path1"    # description of first symlink
    ["$HOME/original/path2"]="$HOME/target/path2"    # description of second symlink
)

# Directory Copy Configuration
# Format: ["source_path"]="target_path"
# Note: Paths can use $HOME or other environment variables, or start with ./
# The contents of source_path will be copied to target_path
declare -A COPY_PATHS=(
    ["./sources/fonts"]="$HOME/.fonts"              # user fonts
    ["./sources/icons"]="$HOME/.icons"              # user icons
    ["./sources/launchers"]="$HOME/.local/share/applications"  # application launchers
    ["./sources/home"]="$HOME"                      # home directory files
)

# Repository Configuration

# PPA Repositories
# Format: Array of PPA URLs
# Example: ppa:user/repository-name
declare -a PPA_REPOSITORIES=(
    "ppa:touchegg/stable"        # Touchegg for touchpad gestures
    "ppa:flatpak/stable"         # Flatpak
)

# GPG Key Repositories
# Format: ["repository-name"]="key_url|key_path|source_entry"
# Note: key_url can be http(s):// URL or file path
#       key_path is where to store the key (usually in /etc/apt/keyrings/)
#       source_entry is the repository source list entry
declare -A GPG_REPOSITORIES=(
    ["sublime-text"]="https://download.sublimetext.com/sublimehq-pub.gpg|/etc/apt/keyrings/sublime-text.gpg|deb https://download.sublimetext.com/ apt/stable/"
    ["brave-browser"]="https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg|/etc/apt/keyrings/brave-browser-archive-keyring.gpg|deb [signed-by=/etc/apt/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main"
    ["docker"]="https://download.docker.com/linux/ubuntu/gpg|/etc/apt/keyrings/docker.asc|deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable"
)

# Packages to remove before adding certain repositories (e.g., for Docker)
declare -a CONFLICTING_PACKAGES=(
    "docker.io"
    "docker-doc"
    "docker-compose"
    "docker-compose-v2"
    "podman-docker"
    "containerd"
    "runc"
) 